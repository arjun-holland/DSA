/*
Given an array arr[] and an integer k, divide the array into k contiguous subarrays such that 
the maximum sum among these subarrays is minimized. Find this minimum possible maximum sum.

Examples:
Input: arr[] = [1, 2, 3, 4], k = 3
Output: 4
Explanation: Optimal Split is [1, 2], [3], [4]. Maximum sum of all subarrays is 4, which is minimum possible for 3 splits.

Input: arr[] = [1, 1, 2], k = 2
Output: 2
Explanation: Splitting the array as [1, 1] and [2] is optimal. This results in a maximum sum subarray of 2.

Constraints:
1 ≤ k ≤ arr.size() ≤ 10^5
1 ≤ arr[i] ≤ 10^4
*/


// Approach: Binary Search on the answer range (max element to total sum). Use greedy check to verify if mid can split array into at most k parts.
// Time Complexity: O(n * log(n)), where n = size of array.
// Space Complexity: O(1)

class Solution {
public:
    // Check if we can split the array into at most k subarrays such that no subarray has a sum greater than mid
    bool check(int mid, vector<int>& arr, int k) {
        int n = arr.size();
        int count = 1;     // Start with 1 subarray
        int sum   = 0;     // Running sum of current subarray
        for (int i = 0; i < n; i++) {
            if (arr[i] > mid) {   // If any element is greater than mid, we cannot make such a split
                return false;
            }
            sum += arr[i];        // Add current element to current subarray
            if (sum > mid) {      // If the sum exceeds mid, we need to start a new subarray
                count++;
                sum = arr[i];     // Start new subarray with current element
            }
        }
        return count <= k;        // Return true if we used k or fewer subarrays
    }
    int splitArray(vector<int>& arr, int k) {
        int n = arr.size();

        int low    = *max_element(arr.begin(), arr.end());        // Minimum possible max subarray sum
        int high   = accumulate(arr.begin(), arr.end(), 0);       // Maximum possible max subarray sum
        int result = 0;

        // Binary search for the minimum max subarray sum
        while (low <= high) {
            int mid = (low + high) / 2;

            if (check(mid, arr, k)) {
                result = mid;      // Mid is a possible answer
                high   = mid - 1;  // Try to find a smaller one
            } else {
                low = mid + 1;     // Increase mid to try bigger max sum
            }
        }
        return result;
    }
};
