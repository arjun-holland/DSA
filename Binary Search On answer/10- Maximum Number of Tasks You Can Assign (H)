/*
You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks,
with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed 
integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single 
task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers 
receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength,
return the maximum number of tasks that can be completed.
 

Example :
Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)

 

Constraints:
n == tasks.length
m == workers.length
1 <= n, m <= 5 * 10^4
0 <= pills <= m
0 <= tasks[i], workers[j], strength <= 10^9
*/

class Solution {
public:
    bool canAssign(int k, vector<int>& tasks, vector<int>& workers, int pills,
int strength) {
        multiset<int> availableWorkers;
        int n = workers.size();
        int i = 0,ks = k;  // Take the strongest 'k' workers
        while (ks--) {
            availableWorkers.insert(workers[n - 1 - i]);
            i++;
        }
        int usedPills = 0;
        // Try assigning the hardest 'k' tasks
        for (int i = k - 1; i >= 0; --i) {
            int task = tasks[i];
            auto it = availableWorkers.lower_bound(task);
            if (it != availableWorkers.end()) {
                // Found worker without pill
                availableWorkers.erase(it);
            } else {
                // Try with pill: find the weakest worker that can do task with
                // boost
                it = availableWorkers.lower_bound(task - strength);
                if (it == availableWorkers.end())
                    return false;
                availableWorkers.erase(it);
                usedPills++;
                if (usedPills > pills)
                    return false;
            }
        }
        return true;
    }

    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills,
                      int strength) {
        sort(tasks.begin(), tasks.end());
        sort(workers.begin(), workers.end());

        int low = 0, high = min((int)tasks.size(), (int)workers.size());
        int result = 0;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (canAssign(mid, tasks, workers, pills, strength)) {
                result = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return result;
    }
};
