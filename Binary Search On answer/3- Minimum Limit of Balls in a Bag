/*
You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.
You can perform the following operation at most maxOperations times:

Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.
Return the minimum possible penalty after performing the operations.

Example :
Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.

Constraints:
1 <= nums.length <= 10^5
1 <= maxOperations, nums[i] <= 10^9
*/

class Solution {
public:
    int isValid(vector<int>& nums,int m, int mo){
        int opHas = 0; //operations has
        for(int e : nums){
            int a = e/m;
            if(e % m == 0)a = a-1;
            opHas += a;
            if(opHas > mo)return false;
        }
        return opHas <= mo;
    }
    int minimumSize(vector<int>& nums, int maxOperations) {
        int i = 1,j = *max_element(nums.begin(),nums.end());
        int ans = INT_MAX;
        while(i <= j){
            int m = i+(j-i)/2;
            if(isValid(nums,m,maxOperations)){
                ans = m;
                j = m-1;
            }
            else{
                i = m+1;
            }
        }
        return ans;
    }
};
