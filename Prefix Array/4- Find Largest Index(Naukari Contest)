/*
Problem statement
You are given an array of integers(ARR) and Q queries.
Query Type-> X: Find the largest index IND such that ARR[1] & ARR[2] & â€¦...ARR[IND] >=X 
For each query, your task is to find out the largest index IND such that the bitwise and of elements
in the array ARR from index 1 to IND is greater than equal to X.

Example:-
ARR = [3,7,9,16]
Q = 2
Query 1-> 2 
Query 2-> 3
Answer for the first query is 2. (3 & 7 = 3 >= 2).
Answer for the second query is 3 (3 & 7 & 9 >= 1).
Detailed explanation ( Input/output format, Notes, Images )

Constraints :
1 <= T <= 5
3 <= N <= 10^5
1 <= Q <= 10^5
1 <= ARR[i] <= 10^9
1 <= X <= 10^9

Time Limit: 1sec
Sample Input 1 :
1
4 2
3 7 9 16
2
1
Sample Output 1 :
2
3
Explanation for Sample Output 1 :
In the first test case, the answer to the first query is 2 as 3 & 7 is 3 which is greater equal to 2. The answer to the second query is 3 as 3 & 7 & 9 is 1 which is greater equal to 1.

*/

âœ… Correct Approach
Step-by-step Plan:
- Precompute a prefix AND array:
        prefixAND[i] = arr[0] & arr[1] & ... & arr[i]
- For each query X, find the maximum index i where prefixAND[i] >= X.
        Since prefix AND is non-increasing(Decreasing), you can use binary search to make it faster.
ðŸ§ª Example
Input:
arr = [3, 7, 9, 16]  queries = [2, 1]
Prefix ANDs: [3, 3, 1, 0] which is decreasing
Now just find the longest index in that such that whos value is >= x

âœ…code
#include <bits/stdc++.h>
using namespace std;

vector<int> bitwiseAnd(int n, int q, vector<int> arr, vector<int> queries) {
    vector<int> prefix(n);
    prefix[0] = arr[0];

    for (int i = 1; i < n; i++) {
        prefix[i] = prefix[i - 1] & arr[i];
    }

    vector<int> ans;
    for (int x : queries) {
        int l = 0, r = n - 1;
        int res = 0;

        while (l <= r) {
            int mid = (l + r) / 2;
            if (prefix[mid] >= x) {
                res = mid + 1;      // store 1-based index
                l = mid + 1;        // try for higher index
            } else {
                r = mid - 1;
            }
        }
        ans.push_back(res);
    }
    return ans;
}

