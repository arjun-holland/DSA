/*
Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and
nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].
Return the maximum difference. If no such i and j exists, return -1.

Example :
Input: nums = [7,1,5,4]
Output: 4
Explanation:
The maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.
Note that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid.
*/

class Solution {
public:
    int maximumDifference(vector<int>& nums) {
        int n = nums.size();
        vector<int> pi(n),si(n);
        pi[0] = nums[0];
        si[n-1] = nums[n-1];
        for(int i=1;i<n;i++){
            pi[i] = min(pi[i-1],nums[i]);
        }
        for(int i=n-2;i>=0;i--){
            si[i] = max(si[i+1],nums[i]);
        }
        int res = 0;
        for(int i=0;i<n;i++){
            res = max(res,si[i]-pi[i]);
        }
        if(res == 0)return -1;
        return res;
    }
};
