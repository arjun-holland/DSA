/*
Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:
Input: heights = [2,4]
Output: 4
 
Constraints:
1 <= heights.length <= 10^5
0 <= heights[i] <= 10^4
*/

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        vector<int> left(n), right(n);
  
        // Calculate left limits for each bar
        for(int i = 0; i < n; ++i) {
            while(!st.empty() && heights[st.top()] >= heights[i]) { //we need the left min val index for cur value
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        // Clear the stack to reuse
        while(!st.empty()) st.pop();

        // Calculate right limits for each bar
        for(int i = n - 1; i >= 0; --i) {
            while(!st.empty() && heights[st.top()] >= heights[i]) {  //we need the right min val index for cur 
                st.pop();
            }
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }
 
        // Compute max area
        int maxArea = 0;
        for(int i = 0; i < n; ++i) {
            int width = right[i] - left[i] - 1;
            maxArea = max(maxArea, heights[i] * width);
        }
        return maxArea;
    }
};
