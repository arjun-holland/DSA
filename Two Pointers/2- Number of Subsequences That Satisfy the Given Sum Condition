/*
You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:
Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Example 2:
Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

Example 3:
Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).
 

Constraints:
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^6
1 <= target <= 10^6
*/

class Solution {
public:
    // Define modulo constant to prevent overflow
    int mod = 1e9 + 7;

    // Fast modular exponentiation: calculates (i^j) % mod
    int pow(int i, int j) {
        if (j == 0) return 1;        // base case: anything^0 = 1
        if (j == 1) return i % mod;  // base case: power of 1
        int hp = pow(i, j / 2);      // recursive call to compute half power
        int fp = 1LL * hp * hp % mod; // square it and take modulo
        if (j % 2 != 0) fp = 1LL * fp * i % mod; // if exponent is odd, multiply once more
        return fp;
    }

    // Main function to count valid subsequences
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end()); // sort to apply two-pointer logic
        int i = 0, j = nums.size() - 1; // two pointers: i = left (min), j = right (max)
        long long ans = 0;

        // Two-pointer approach
        while (i <= j) {
            if (nums[i] + nums[j] <= target) {
                // if min + max <= target, then all subsets between i and j are valid
                ans += pow(2, (j - i)); // count 2^(j-i) subsets
                i++; // move left pointer
            } else {
                j--; // if sum too big, reduce max by moving right pointer
            }
        }

        // Return result modulo 1e9+7
        return static_cast<int>(ans % mod);
    }
};

