/*
You are given an array arr[] of integers, where each element represents the number of coins in a pile. 
You are also given an integer k.Your task is to remove the minimum number of coins such that the absolute 
difference between the number of coins in any two updated piles is at most k.
Note: You can also remove a pile by removing all the coins of that pile.

Examples:
Input: arr[] = [2, 2, 2, 2], k = 0
Output: 0
Explanation: For any two piles the difference in the number of coins is <= 0. So no need to remove any coin. 

Constraints:
1 ≤ arr.size() ≤ 10^5
1 ≤ arr[i] ≤ 10^4
0 ≤ k ≤ 10^4
*/

            // Coins to remove:
            // - From 0 to i-1: remove entire piles
            // - From idx to n-1: remove extra coins beyond maxAllowed
            //prefix[n] - prefix[idx] : no.of coins and (n - idx) : no.of piles 


class Solution {
public:
    int minimumCoins(vector<int>& arr, int k) {
        sort(arr.begin(), arr.end());
        int n = arr.size();
        vector<long long> prefix(n + 1, 0);
        
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + arr[i];    // prefix sum
        }

        long long res = LLONG_MAX;

        for (int i = 0; i < n; ++i) {
            int maxAllowed = arr[i] + k;   //limit i.e arr[i] is the smallest allowed value in final pile
            
            int idx = upper_bound(arr.begin(), arr.end(), maxAllowed) - arr.begin();  // Use binary search to find first pile > maxAllowed i.e greater then limit

            long long removeLeft = prefix[i];     // Remove all coins from left part
            long long removeRight = prefix[n] - prefix[idx] - 1LL * (n - idx) * maxAllowed;
            
            long long totalRemove = removeLeft + removeRight;
            res = min(res, totalRemove);
        }

        return (int)res;
    }
};


