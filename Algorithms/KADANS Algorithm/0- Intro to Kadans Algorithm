💡🚀 What is Kadane’s Algorithm?
Kadane’s Algorithm is a powerful technique used to find the maximum sum of a contiguous subarray within a 1D array of numbers. It works efficiently in O(n) time, making it ideal for large datasets.

🔁 Why It Works – The Intuition
Kadane’s Algorithm builds on the concept of prefix sums, though it doesn’t store the full prefix sum array.
Instead, it tracks the best sum that ends at each position while iterating through the array.
You don’t need to check all subarrays. Instead, you move forward, always deciding:

“Should I continue the current subarray or start fresh at this element?”
This decision is made using:
        currentSum = max(currentElement, currentSum + currentElement);
You keep updating a global maxSum to store the best answer found so far.

🧠 How It Relates to Prefix Sums
While it's not a direct extension of the prefix sum, the concept is similar:
-Prefix sums store sums from the start to each index.
-Kadane’s stores the best subarray sum ending at each index, effectively leveraging partial prefix logic dynamically.

In other words, it helps us find:
The maximum subarray ending at index i, by comparing: Just a[i] Or extending the previous best: a[i] + best till i-1

✨ Handles All Cases Gracefully
✅ All Positive Values:
Just sum the array — the entire array is the maximum subarray.

✅ All Negative Values:
Just pick the least negative element (i.e., the highest number among negatives).

✅ Mixed Values:
This is where Kadane’s shines! It efficiently navigates ups and downs to find the best segment.

🛠️ Pseudocode:
int maxSubarraySum(const vector<int>& a) {
    int maxSum = a[0];
    int currSum = a[0];

    for (int i = 1; i < a.size(); ++i) {
        currSum = max(a[i], currSum + a[i]);
        maxSum = max(maxSum, currSum);
    }
    return maxSum;
}

💼 Real-World Applications
Kadane’s Algorithm is used in many interview and real-life problems, like:
✅ Amazon Online Assessment questions
📈 Maximum profit segment in stock price arrays
🧠 Finding best mood streaks in sentiment data
🔁 Maximum energy streak in game scores
🛍️ Analyzing best streaks of sales growth

🔄 Kadane Extensions You Should Know
Find subarray indices (start and end)
Handle 2D arrays (max sum rectangle)
Two non-overlapping subarrays
K-concatenated arrays (Kadane on repeated arrays)
Subarray with max product (variation)

📌 Pro Tip:
Kadane’s algorithm doesn’t need to store any extra prefix array. It just updates two variables:
➡️ currentSum: The best sum ending at current index
➡️ maxSum: The best sum found overall so far

✅ Final Thoughts
Kadane’s Algorithm is a go-to method for max subarray problems — it's fast, reliable, and works even when the 
array contains only negative numbers. Just remember:
If you're dealing with all negatives, return the max negative element
For mixed arrays, Kadane does its magic automatically
