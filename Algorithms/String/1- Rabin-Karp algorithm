/*
   Search Pattern (Rabin-Karp Algorithm)
Given two strings:
A text string in which you want to search.
A pattern string that you are looking for within the text.
Return all positions (1-based indexing) where the pattern occurs as a substring in the text. If the pattern does not occur, return an empty list.
All characters in both strings are lowercase English letters (a to z).
*/

/*
Rabin-Karp algorithm : String Matching Algorithm
Rabin-Karp algorithm also check every substring. But unlike the Naive algorithm, the Rabin Karp algorithm matches
the hash value of the pattern with the hash value of the current substring of text, and if the hash values match then only it
starts matching individual characters.it uses the sliding windows technique.

Time Complexity : O(n+m) where n:len of patten and m:len of text
*/

class Solution {
public:
    // Helper function to compare pattern with substring of text at index idx
    bool isMatch(string& txt, string& pat, int idx) {
        for (int i = 0; i < pat.size(); i++) {
            if (txt[idx + i] != pat[i]) {
                return false;
            }
        }
        return true;
    }
    
    vector<int> search(string& pat, string& txt) {
        int m = pat.size();  // Length of pattern
        int n = txt.size();  // Length of text
        int base = 26;       // Base for hash (26 lowercase letters)
        int mod  = 101;      // A prime modulus to avoid overflow and reduce collisions
        vector<int> result;
        int patHash = 0; // Hash value for pattern
        int txtHash = 0; // Rolling hash value for text
        int power   = 1; // Power of base (base^i)

        // Compute initial hash for pattern and first window of text
        for (int i = m - 1; i >= 0; i--) {
            int patVal = pat[i] - 'a' + 1; //as we assume a = 1,b = 2 ....z = 26
            int txtVal = txt[i] - 'a' + 1;

            patHash = (patHash + patVal * power) % mod;
            txtHash = (txtHash + txtVal * power) % mod;
            power   = (power * base) % mod;
        }

        // Compare first window hash
        if (txtHash == patHash && isMatch(txt, pat, 0)) {
            result.push_back(1); // Store 1-based index
        }

        // Precompute highest power for sliding window (base^(m-1)) ,m-1 as we follow 0 index 
        int highestPower = 1;  // a^0 = 1
        for (int i = 1; i < m; i++) {
            highestPower = (highestPower * base) % mod;   //pow(base,m)
        }

        // Slide window across text
        for (int i = 1; i <= n - m; i++) {
            int leftVal = txt[i - 1] - 'a' + 1;

            // Remove leftmost character from hash
            txtHash = (txtHash - (leftVal * highestPower) % mod + mod) % mod;
            txtHash = (txtHash * base) % mod;

            // Add new character to hash
            int newVal = txt[i + m - 1] - 'a' + 1;
            txtHash = (txtHash + newVal) % mod;

            // If hashes match, verify with character comparison
            if (txtHash == patHash && isMatch(txt, pat, i)) {
                result.push_back(i + 1); // Store 1-based index
            }
        }

        return result;
    }
};
