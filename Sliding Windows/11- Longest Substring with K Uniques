/*
You are given a string s consisting only lowercase alphabets and an integer k. Your task is to find the length of the longest substring that contains exactly k distinct characters.
Note : If no such substring exists, return -1. 

Examples:
Input: s = "aabacbebebe", k = 3
Output: 7
Explanation: The longest substring with exactly 3 distinct characters is "cbebebe", which includes 'c', 'b', and 'e'.

Constraints:
1 ≤ s.size() ≤ 10^5
1 ≤ k ≤ 26
*/

class Solution {
  public:
    int longestKSubstr(string &s, int k) {
        unordered_map<char,int> mp;
        int l = 0,j = 0,r = s.length()-1;
        int ans =  0;
        while(l <= r){
            mp[s[l]]++;
            while(mp.size() > k){
                mp[s[j]]--;
                if(mp[s[j]] == 0)mp.erase(s[j]);
                j++;
            }
            if(mp.size() == k)ans = max(ans,(l-j+1));
            l++;
        }
        return (ans == 0)? -1 : ans;
    }
};
