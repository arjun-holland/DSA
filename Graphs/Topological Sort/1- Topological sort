/*
Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes a directed edge u -> v. Return the topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be true else false.

Examples:


Input: V = 6, E = 6, edges[][] = [[1, 3], [2, 3], [4, 1], [4, 0], [5, 0], [5,2]]
Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the graph are:
     (0) <--- (4) ---> (1)
      ^                  |
      |                  v
     (5) ---> (2) --->  (3)

[4, 5, 0, 1, 2, 3]
[5, 2, 4, 0, 1, 3]

Input: V = 4, E = 3, edges[][] = [[3, 0], [1, 0], [2, 0]]
Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the given graph are:
[3, 2, 1, 0]
[1, 2, 3, 0]
[2, 3, 1, 0]
Constraints:
2  ≤  V  ≤  5 x 10^3
1  ≤  E = edges.size()  ≤  min[105, (V * (V - 1)) / 2]
*/



class Solution {
  public:
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        unordered_map<int,vector<int>> adjL;
        vector<int> indegree(V,0);
        for(auto e : edges){   //findinh indegree
            int u = e[0];
            int v = e[1];
            adjL[u].push_back(v);
            indegree[v]++;
        }
        
        queue<int> q;
        for(int i=0;i<V;i++){     //push nodes in queue for which indegree is 0
            if(indegree[i] == 0)
                q.push(i);
        }
        
        vector<int> ans;
        while(!q.empty()){
            int vertix = q.front();
            q.pop();
            ans.push_back(vertix);
            for(int ngh : adjL[vertix]){
                indegree[ngh]--;
                if(indegree[ngh] == 0){
                    q.push(ngh);
                }
            }
        }
        return ans;
    }
};


//{ Driver Code Starts.
int check(int V, vector<int> &res, vector<vector<int>> adj) {

    if (V != res.size())
        return 0;

    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v])
                return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int V, E;
        cin >> V >> E;

        int x = V;
        vector<vector<int>> adj(V);
        vector<vector<int>> edges;

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            edges.push_back({u, v});
        }

        Solution obj;
        vector<int> res = obj.topoSort(V, edges);
        bool ans = check(x, res, adj);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";
        cout << "~"
             << "\n";
    }

    return 0;
}
// } Driver Code Ends
