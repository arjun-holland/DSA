/*
Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not.

Examples:
Input: V = 4, E = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]]
     (1)———-(2)
      |   /  |
      | /    |
     (0)    (3)
Output: true
Explanation: 
1 -> 2 -> 0 -> 1 is a cycle.

Input: V = 4, E = 3, edges[][] = [[0, 1], [1, 2], [2, 3]]
     (1)———(2)
      |     |
      |     |
     (0)    (3)
Output: false
Explanation: 
 
No cycle in the graph.
Constraints:
1 ≤ V ≤ 105
1 ≤ E = edges.size() ≤ 105

*/

class Solution {
  public:
    bool dfs(int node, int parent, unordered_map<int, vector<int>>& mp, vector<bool>& visited) {
        visited[node] = true;
        for (int neighbor : mp[node]) {
            if (!visited[neighbor]) {
                if (dfs(neighbor, node, mp, visited)) return true;
            } else if (neighbor != parent) {
                return true; // Visited node that's not parent ⇒ cycle
            }
        }
        return false;
    }

    bool isCycle(int V, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> mp;

        for (auto e : edges) {
            int u = e[0], v = e[1];
            mp[u].push_back(v);
            mp[v].push_back(u);
        }

        vector<bool> visited(V, false);

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, -1, mp, visited)) return true;
            }
        }

        return false;
    }
};
