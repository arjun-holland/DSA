/*
You are given a sorted array arr[] of unique integers, an integer k, and a target value x. Return exactly k elements from the array closest to x, excluding x if it exists.
An element a is closer to x than b if:

a - x| < |b - x|, or
|a - x| == |b - x| and a > b (i.e., prefer the larger element if tied)
Return the k closest elements in order of closeness.

Input: arr[] = [1, 3, 4, 10, 12], k = 2, x = 4
Output: 3 1
Explanation: 4 is excluded, Closest elements to 4 are: 3 (1), 1 (3). So, the 2 closest elements are: 3 1

Constraints:
1 ≤ arr.size() ≤ 10^5
1 ≤ k ≤ arr.size()
1 ≤ x ≤ 10^6
1 ≤ arr[i] ≤ 10^6
*/


class Solution {
  public:
    vector<int> printKClosest(vector<int> arr, int k, int x) {
        map<int,set<int>> mp;
        int n = arr.size();
        for(int i=0;i<n;i++){
            if(arr[i] == x)continue;
            int d = abs(x-arr[i]);
            mp[d].insert(arr[i]);
        }
        vector<int> ans;
        while(k > 0){
            auto it = mp.begin();
            set<int> v = it->second;
            if(v.size() == 1){
                ans.push_back(*v.begin());
            }else{
                while(k > 0 && !v.empty()){
                    ans.push_back(*v.rbegin());
                    v.erase(*v.rbegin());
                    k--;
                }
                k++;
            }
            mp.erase(mp.begin());
            k--;
        }
        return ans;
    }
};
