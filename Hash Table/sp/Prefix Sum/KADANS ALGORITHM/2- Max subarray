Given an integer array nums, find the subarray with the largest sum, and return it.

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: [4,-1,2,1]
Explanation: The subarray [4,-1,2,1] has the largest sum 6.


class Solution {
public:
  int maxSubarraySumWithIndices(const vector<int>& a) {
    int maxSum = INT_MIN;
    int currSum = 0;
    int start = 0, tempStart = 0, end = 0;
    for (int i = 0; i < a.size(); ++i) {
        if (currSum <= 0) {
            currSum = a[i];
            tempStart = i;  // potential start of a new subarray
        } else {
            currSum += a[i];
        }
        if (currSum > maxSum) {
            maxSum = currSum;
            start = tempStart;
            end = i;
        }
    }
    cout << "Max Subarray Sum: " << maxSum << endl;
    cout << "Start Index: " << start << ", End Index: " << end << endl;
      //write loop from start to end index to print the values
    return maxSum;
  }
};
