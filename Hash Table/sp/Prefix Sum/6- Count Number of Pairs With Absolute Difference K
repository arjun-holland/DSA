/*
Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.

The value of |x| is defined as:
x if x >= 0.
-x if x < 0.

Example 1:

Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
1 <= k <= 99
*/

abs(nums[i] - nums[j]) == k
This has two possible solutions:
nums[i] - nums[j] == k ==> nums[j] - nums[i] == k
Which we can rearrange as:
nums[i] - nums[j] == k ==> nums[j] + k == nums[i]



class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        int ct = 0;
        
        for(int i=0;i<nums.size();i++){
            int nj = nums[i];
            
            if(mp.find(nj-k) != mp.end())ct += mp[nj-k];
            
            if(mp.find(nj+k) != mp.end())ct += mp[nj+k];
            
            mp[nj]++;   //to update the frequency
        }
        return ct;
    }
};
