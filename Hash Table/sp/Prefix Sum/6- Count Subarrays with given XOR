/*
Given an array of integers arr[] and a number k, count the number of subarrays having XOR of their elements as k.

Examples: 
Input: arr[] = [4, 2, 2, 6, 4], k = 6
Output: 4
Explanation: The subarrays having XOR of their elements as 6 are [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], and [6]. Hence, the answer is 4.
Input: arr[] = [5, 6, 7, 8, 9], k = 5
Output: 2
Explanation: The subarrays having XOR of their elements as 5 are [5] and [5, 6, 7, 8, 9]. Hence, the answer is 2.
Input: arr[] = [1, 1, 1, 1], k = 0
Output: 4
Explanation: The subarrays are [1, 1], [1, 1], [1, 1] and [1, 1, 1, 1].

Constraints:
1 ≤ arr.size() ≤ 10^5
0 ≤ arr[i] ≤10^5
0 ≤ k ≤ 10^5

*/


/* BRUTE FORCE WAY
       int r =0;
        for(int i=0;i<arr.size();i++){
            int xr = arr[i];
            if(xr == k) r++;
            for(int j=i+1;j<arr.size();j++){
                xr = xr^arr[j];
                if(xr == k){
                    r++;
                }
            }
        }
        return r;
 */


class Solution {
  public:
    long subarrayXor(vector<int> &arr, int k) {
     int r =0;
     unordered_map<int,int> mp;
     int prefixXOR = 0;
       mp[0] = 1;
       for(int i=0;i<arr.size();i++){
         
         prefixXOR ^= arr[i];
         if(mp.find(prefixXOR ^ k) != mp.end()){
             r += mp[prefixXOR ^ k];
         }
         mp[prefixXOR]++;
       }
     return r;
    }
};

