Subarray Sums Divisible by K
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.
A subarray is a contiguous part of an array.

Example :
Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:
Input: nums = [5], k = 9
Output: 0
 

Constraints:
1 <= nums.length <= 3 * 10^4
-104 <= nums[i] <= 10^4
2 <= k <= 10^4


class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int sum = 0;
        int res = 0;
        unordered_map<int,int> mp; //remainder -> count
        mp[0] = 1;
        
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            int rem = sum % k;
            if(rem < 0){
                rem = rem + k;
            }
            if(mp.find(rem) != mp.end())  {
                res += mp[rem];
            }    
            mp[rem]++;
        }
        return res;
    }
};



//BruteForce
// class Solution {
// public:
//     int subarraysDivByK(vector<int>& nums, int k) {
//         int res = 0;
//         int n = nums.size();
//         for(int i=0;i<n;i++){
//             int sum = 0;
//             for(int j=i;j<n;j++){
//                 sum += nums[j];
//                 if(sum % k == 0){
//                     res++;
//                 }
//             }
//         }  
//         return res;
//     }
// };
