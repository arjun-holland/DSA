Given an array arr[], the task is to find the maximum distance between two occurrences of an element.
If no element has two occurrences, then return 0.

Examples:
Input: arr[] = [1, 1, 2, 2, 2, 1]
Output: 5
Explanation: distance for 1 is: 5-0 = 5, distance for 2 is : 4-2 = 2, So max distance is 5.

Expected Time Complexity :  O(n)
Expected Auxilliary Space : O(n)

Constraints:
1 <= arr.size() <= 10^6
1 <= arr[i] <= 10^9

class Solution {
  public:
    int maxDistance(vector<int> &arr) {
        int d = 0;
        unordered_map<int,int> mp;
        for(int i=0;i<arr.size();i++){
            if(mp.find(arr[i]) == mp.end()){  //store the index
                mp[arr[i]] = i;
            }else{
                int prev_d = mp[arr[i]];
                int cur_d = i;
                d = max(d, (cur_d-prev_d));
            }
        }
        return d;
    }
};
