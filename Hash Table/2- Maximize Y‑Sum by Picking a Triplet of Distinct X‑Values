/*
You are given two integer arrays x and y, each of length n. You must choose three distinct indices i, j, and k such that:
x[i] != x[j]
x[j] != x[k]
x[k] != x[i]
Your goal is to maximize the value of y[i] + y[j] + y[k] under these conditions. Return the maximum possible sum that can be obtained by choosing such a triplet of indices.
If no such triplet exists, return -1.

Input: x = [1,2,1,3,2], y = [5,3,4,6,2]
Output: 14
Explanation:
Choose i = 0 (x[i] = 1, y[i] = 5), j = 1 (x[j] = 2, y[j] = 3), k = 3 (x[k] = 3, y[k] = 6).
All three values chosen from x are distinct. 5 + 3 + 6 = 14 is the maximum we can obtain. Hence, the output is 14.
*/



class Solution {
public:
    int maxSumDistinctTriplet(vector<int>& x, vector<int>& y) {
        unordered_map<int,vector<int>> mp;
        int n = x.size();

        for(int i=0;i<n;i++){
            mp[x[i]].push_back(i);  //to get the positions of particular int
        }
        int sz = mp.size();
        if(sz < 3)return -1;
        
        vector<int> dl;
        for(auto [e,s] : mp){
            int mz = INT_MIN;
            for(int i=0;i<s.size();i++){
                mz = max(mz,y[s[i]]);  //find max in the positions available in Y
            }
            dl.push_back(mz);
        }
        sort(dl.begin(),dl.end());
        int ds = dl.size();
        int res = dl[ds-1]+dl[ds-2]+dl[ds-3];
        return res;
    }
};
