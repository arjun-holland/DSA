/*
Given a gold mine called mat[][]. Each field in this mine contains a positive integer which is the amount of gold in tons. 
Initially, the miner can start from any row in the first column. From a given cell, the miner can move -
to the cell diagonally up towards the right
to the right
to the cell diagonally down towards the right
Find out the maximum amount of gold that he can collect until he can no longer move.

Ex:
Input: mat[][] = [[1, 3, 3], [2, 1, 4], [0, 6, 4]]
Output: 12
Explaination: The path is (1, 0) -> (2, 1) -> (2, 2). Total gold collected is 2 + 6 + 4 = 12.

Constraints:
1 ≤ mat.size(), mat[0].size() ≤ 500
0 ≤ mat[i][j] ≤ 100
*/



class Solution {
public:
    int solve(vector<vector<int>>& m, int r, int c, vector<vector<int>>& dp) {
        int n = m.size();
        int cols = m[0].size();

        if (r < 0 || r >= n || c < 0 || c >= cols)    // Out of bounds
            return 0;
          
        if (c == cols - 1)            // If in the last column, just return the gold at that cell
            return dp[r][c] = m[r][c];

        if (dp[r][c] != -1)         // If already computed
            return dp[r][c];


        // Explore three directions
        int s1 = m[r][c] + solve(m, r - 1, c + 1, dp);    // right-up
        int s2 = m[r][c] + solve(m, r, c + 1, dp);        // right
        int s3 = m[r][c] + solve(m, r + 1, c + 1, dp);    // right-down

        return dp[r][c] = max({s1, s2, s3});
    }

    int maxGold(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        int ans = 0;

        // Initialize dp table with -1
        vector<vector<int>> dp(n, vector<int>(m, -1));

        // Try starting from every row in the first column
        for (int i = 0; i < n; i++) {
            ans = max(ans, solve(mat, i, 0, dp));
        }
        return ans;
    }
};
