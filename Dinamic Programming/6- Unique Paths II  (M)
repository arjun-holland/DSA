/*
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot 
include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 10^9.

Example:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
*/

class Solution {
public:
    int solve(int i,int j,int n,int m,vector<vector<int>>& og,vector<vector<int>>& dp){
        if(i == n && j == m)return 1;
        if(i > n || j > m)return 0;
        if(og[i][j] == 1)return 0;
        if(dp[i][j] != -1)return dp[i][j];
        
        return dp[i][j] = solve(i+1,j,n,m,og,dp)+solve(i,j+1,n,m,og,dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& og) {  //og : obstacleGrid
        int n = og.size()-1;
        int m = og[0].size()-1;
        if(og[n][m] == 1)return 0;      //if obstracle is in last block then cant recah it
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return solve(0,0,n,m,og,dp);
    }
};




//Unique paths 111 : a problem to  these current problem extension solved in backtracking [check it after these].
