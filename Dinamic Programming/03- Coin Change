/*
You are given an integer array coins representing coins of different denominations andan integer 
amount representing a total amount of money.Return the fewest number of coins that you need to
make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0
 
Constraint
1 <= coins.length <= 12
1 <= coins[i] <= 2^31 - 1
0 <= amount <= 10^4
*/


class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
  
        vector<int> amt(amount + 1, amount + 1);  // Create a DP array initialized to a large value (amount + 1 signifies "infinity" here)
        
        amt[0] = 0;   // Base case: 0 coins needed to make amount 0

        for (int i = 1; i <= amount; i++) {           // Loop through all amounts from 1 to 'amount'
            for (int j = 0; j < coins.size(); j++) {      // Check every coin denomination
                if (i >= coins[j]) {           //amount is >= current coin i.e If the coin can be used for current amount i
                    amt[i] = min(amt[i], 1 + amt[i - coins[j]]);   
                }
            }
        }

        if (amt[amount] < amount + 1) return amt[amount]; // If amt[amount] is still 'infinity', no combination can form the amount
      
        return -1;  // Otherwise, return -1 to indicate no solution
    }
};


// Explanation : amt[i] = min(amt[i], 1 + amt[i - coins[j]]);  
// Suppose we're trying to compute the minimum number of coins needed to make amount 'i'
// 'amt[i]' holds the best (minimum) answer we have found so far for this amount

// 'i' is the current amount available
// 'coins[j]' is the value of the current coin we're considering
// 'i - coins[j]' is the amount that would remain if we used this coin

// For example, if i = 7 and coins[j] = 2, then i - coins[j] = 5
// So we're asking: what is the minimum number of coins needed to make up 5?
// That's already computed and stored in amt[5]

// '1 + amt[i - coins[j]]' means:
//   We're using 1 coin of value coins[j] now
//   Plus however many coins were needed to make the remaining amount (i - coins[j])

// So this line:
//   amt[i] = min(amt[i], 1 + amt[i - coins[j]]);
// is saying:
//   "Update amt[i] with the smaller value between its current value,
//    and the value if we use one coin of coins[j] and add it to the number of coins
//    needed to make the remaining amount (i - coins[j])"
//
// In other words: "Try using coins[j], and if it leads to a better (smaller) count,
//                  update amt[i] to reflect that."

