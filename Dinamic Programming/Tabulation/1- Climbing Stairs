/*
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example :
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Constraints:
1 <= n <= 45
*/

// tc : O(n)
// sc : O(1)
class Solution {
public:
    int climbStairs(int n) {
        //Base Cases
        if(n <= 2)return n;  

        //no.of ways to go to the step 0,step 1 as prev1, prev2 respectively
        int prev1 = 1; 
        int prev2 = 1;

        int ans = 0;
        for(int i=2; i<=n; i++){
            ans = prev1 + prev2;  //no.of ways on cur step is sum of prev 2 steps
            prev1 = prev2;
            prev2 = ans;
        }

        return ans;
    }
};
