/*
You are given an integer array cost where cost[i] is the cost of ith step on a staircase.
Once you pay the cost, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.

Example :
Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.

Constraints:
2 <= cost.length <= 1000
0 <= cost[i] <= 999
*/

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if(n == 1)return cost[0];
        if(n == 2)return min(cost[0],cost[1]);

        int prev1 = cost[0];
        int prev2 = cost[1];

        for(int i=2;i<n;i++){
            int cur = min(prev1,prev2) + cost[i];
            prev1 = prev2;
            prev2 = cur;
        }
        return min(prev1,prev2);
    }
};



//recursion
class Solution {
public:
    //  int minCostClimbingStairs(vector<int>& cost) {
    void findMinCost(const vector<int>& cost, int index, int currentSum,int& resultSum) {
        // Base case: if we go beyond the last step
        if(index >= cost.size()) {
            // Update the resultSum if the current path's sum is smaller
            if (currentSum < resultSum) {
                resultSum = currentSum;
            }
            return;
        }
        // Add current cost to the sum
        currentSum += cost[index];

        // Recursive calls: move one step or two steps ahead
        findMinCost(cost, index + 1, currentSum, resultSum);
        findMinCost(cost, index + 2, currentSum, resultSum);
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int resultSum = INT_MAX; // Initialize the resultSum with a large value
        // Start recursion from step 0 and step 1
        findMinCost(cost, 0, 0, resultSum);
        findMinCost(cost, 1, 0, resultSum);
        return resultSum;
    }
};
