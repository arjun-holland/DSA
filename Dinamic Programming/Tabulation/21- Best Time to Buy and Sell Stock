/*
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
 

Example:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example :
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4
*/

//Brute force Way
       /*int mxp = 0;
        for(int p = 0; p < prices.size(); p++){
            int b = prices[p];
            for(int i = p+1 ; i<prices.size(); i++){
                int s =prices[i];
                if(s - b < 0 )continue;
                int pr = s - b;
                mxp = max(mxp,pr);
            }
        }
        return mxp;*/


//DP
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int b = INT_MAX;  //we tought buy price has to be minimum
        int p = 0;
        for(int &s : prices){
            if(b > s)b = s;
            p = max(p, s-b);//profit = sell - buy
        }
        return p;

    }
};
