/*
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations
of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique 
if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target 
is less than 150 combinations for the given input.

Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []
 
Constraints:
1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40
*/

//with for loop
class Solution {
public:
    vector<vector<int>> result;
    void solve(vector<int>& candidates, int target, int start, vector<int>& temp) {
        if(target == 0) {
            result.push_back(temp);
            return;
        }
        if(target < 0) return;

        for(int i = start; i < candidates.size(); i++) {
            temp.push_back(candidates[i]);      
            solve(candidates, target - candidates[i], i, temp);  // Not i+1, because we can reuse same element
            temp.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        result.clear();
        vector<int> temp;
        solve(candidates, target, 0, temp);
        return result;
    }
};


//without for loop
class Solution {
public:
    vector<vector<int>> result;

    void solve(vector<int>& candidates, int target, int index, vector<int>& temp) {
        // Base cases
        if(target == 0) {
            result.push_back(temp);
            return;
        }
        if(index >= candidates.size() || target < 0) return;

        temp.push_back(candidates[index]);        // Option 1: Include current element
        solve(candidates, target - candidates[index], index, temp); // Same index for reuse
        temp.pop_back();

        solve(candidates, target, index + 1, temp);   // Option 2: Skip current element and move to next
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        result.clear();
        vector<int> temp;
        solve(candidates, target, 0, temp);
        return result;
    }
};



