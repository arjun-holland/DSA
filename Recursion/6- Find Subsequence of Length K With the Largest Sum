/*
You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.
Return any such subsequence as an integer array of length k.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.

Example 2:
Input: nums = [-1,-2,3,4], k = 3
Output: [-1,3,4]
Explanation: 
The subsequence has the largest sum of -1 + 3 + 4 = 6.

Example 3:
Input: nums = [3,4,3,3], k = 2
Output: [3,4]
Explanation:
The subsequence has the largest sum of 3 + 4 = 7. 
Another possible subsequence is [4, 3].
 
Constraints:
1 <= nums.length <= 1000
-105 <= nums[i] <= 10^5
1 <= k <= nums.length

*/



class Solution {
public:
    int s = INT_MIN; // max sum so far

    void solve(vector<int>& nums, int i, int k, vector<int>& best, vector<int>& curr) {
        if (curr.size() == k) {
            int cs = accumulate(curr.begin(), curr.end(), 0);
            if (cs > s) {
                s = cs;
                best = curr;
            }
            return;
        }

        if (i >= nums.size()) return;

        // Include nums[i]
        curr.push_back(nums[i]);
        solve(nums, i + 1, k, best, curr);
        curr.pop_back();

        // Skip nums[i]
        solve(nums, i + 1, k, best, curr);
    }

    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> best, curr;
        solve(nums, 0, k, best, curr);
        return best;
    }
};
