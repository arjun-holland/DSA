/*
Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].
Example 1:
Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
*/

class Solution {
public:
    int countFind(long cur,long nxt,int n){
        int count = 0;         // how many vallues are present b/w cur ans nxt
        while(cur <= n){
            count += (nxt - cur);
            cur *= 10;
            nxt *= 10;
            nxt = min(nxt,long(n+1));  // the next should not over grown than n limit
        }
        return count;
    }
    int findKthNumber(int n, int k) {
        int cur = 1;
        k -= 1;       //as we have to find (k-1) values ,{we have the one value as 1}
        
        while(k > 0){
            int count = countFind(cur,cur+1,n);
            if(count <= k){
                cur++;       //go to next branch tree
                k -= count;   //skip the elements under current prefix tree
            }else{
                cur *= 10;    //take the first element of that branch tree
                k -= 1;   
            }
        }
        return cur;
    }
};

//TC:log(n)^2
//SC:log(n) system rec stack
