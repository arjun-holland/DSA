/*
Given a string s consisting of digits, determine whether it can be classified as a sum-string.
A sum-string is a string that can be split into more than two non-empty substrings such that:
The rightmost substring is equal to the sum of the two substrings immediately before it (interpreted as integers).
This condition must apply recursively to the substrings before it.
The rightmost substring (and any number in the sum) must not contain leading zeroes, unless the number is exactly '0'.

Examples:
Input: s = "12243660"
Output: true
Explanation: The string can be split as {"12", "24", "36", "60"} where each number is the sum of the two before it:
36 = 12 + 24, and 60 = 24 + 36. Hence, it is a sum-string.
*/

class Solution {
public:
    // Adds two numeric strings and returns the sum as string
    string addStrings(string& num1, string& num2) {
        if (num1.length() < num2.length()) {    // Ensure num1 is the longer string to simplify remaining digit addition
            swap(num1, num2);
        }
        int len1  = num1.length(); //123
        int len2  = num2.length(); // 23
        string sum   = "";
        int carry = 0;
        for (int i = 0; i < len2; i++) {    // Add digits from right to left (least significant to most)
            int d1 = num1[len1 - 1 - i] - '0'; // digit from num1 char
            int d2 = num2[len2 - 1 - i] - '0'; // digit from num2 char
            int digit = (d1 + d2 + carry) % 10;   // resulting digit
            carry = (d1 + d2 + carry) / 10;       // carry for next addition
            sum   = char(digit + '0') + sum;      // prepend digit to sum
        }
        for (int i = len2; i < len1; i++) {  //2<3   // Add remaining digits from num1 (if any)
            int d  = num1[len1 - 1 - i] - '0';
            int digit = (d + carry) % 10;
            carry = (d + carry) / 10;
            sum   = char(digit + '0') + sum;
        }
        if (carry) {    // If carry is left, add it to front
            sum = char(carry + '0') + sum;
        }
        return sum;
    }

  // Recursively checks if the string from index `start` is a valid sum-sequence
    bool checkSequence(string& s, int start, int len1, int len2) {
        string part1 = s.substr(start, len1);            // First number
        string part2 = s.substr(start + len1, len2);     // Second number
        string part3 = addStrings(part1, part2);         // Their sum

        int len3 = part3.length();
        if (start + len1 + len2 + len3 > s.length()) {  // If the sum segment exceeds remaining length, return false
            return false;
        }
        if (part3 == s.substr(start + len1 + len2, len3)) {  // If the calculated sum matches the next substring in s
            if (start + len1 + len2 + len3 == s.length()) {   // If entire string is matched successfully
                return true;
            }
            return checkSequence(s, start + len1, len2, len3);   // Recurse with new start, shifting by part1 length
        }
        return false;   // If sum doesn't match, return false
    }

    // Main function to check if string is a valid sum-string
    bool isSumString(string& s) {
        int n = s.length();
// Try all possible combinations of lengths for first and second parts
/*
 So the condition len1 + len2 < n ensures:
The first number (s.substr(0, len1)) is valid.
The second number (s.substr(len1, len2)) is valid.
There's at least one character left after them to start forming the third number.
*/
        for (int len1 = 1; len1 < n; len1++) {
            for (int len2 = 1; len1 + len2 < n; len2++) {
                if (checkSequence(s, 0, len1, len2)) {
                    return true;
                }
            }
        }
        return false;
    }
    
};
