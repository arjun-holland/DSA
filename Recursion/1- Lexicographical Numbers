/*
Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.
You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

Example 1:
Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:
Input: n = 2
Output: [1,2]

Constraints:
1 <= n <= 5 * 10^4
*/

class Solution {
public:
    void solve(int i,int n,vector<int>& ans){
        if(i > n)return;
        ans.push_back(i);
        for(int j=0;j<=9;j++){
            int nm = i*10 + j;
            if(nm > n)return;
            solve(nm,n,ans);
        }
    }
    vector<int> lexicalOrder(int n) {
        vector<int> ans;
        for(int i=1;i<=9;i++){
            solve(i,n,ans);
        }
        return ans;
    }
};

//T.C : O(n)
//S.C : O(d) d is no.of digits in i
