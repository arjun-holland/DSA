/*
Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.


Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
*/




class Solution {
public:
    void generate(int i, vector<int>& subset, vector<int>& nums,
                  vector<vector<int>>& ans) {
        if (i == nums.size()) {
            ans.push_back(subset);
            return;
        }

        // Pick
        subset.push_back(nums[i]);
        generate(i + 1, subset, nums, ans);
        subset.pop_back();
        
        // Not Pick
        generate(i + 1, subset, nums, ans);
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        if (nums.size() == 0) return {{}};
        
        vector<vector<int>> ans;
        vector<int> subset;
        sort(nums.begin(), nums.end());

        generate(0, subset, nums, ans);
        return ans;
    }
};
