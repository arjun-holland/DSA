/*
Maximum Sum Combination
You are given two integer arrays a[] and b[] of equal size.
A sum combination is formed by adding one element from a[] and one from b[], using each index pair (i, j) at most once. 
Return the top k maximum sum combinations, sorted in non-increasing order.

Examples:
Input: a[] = [3, 2], b[] = [1, 4], k = 2
Output: [7, 6]
Explanation: Possible sums: 3 + 1 = 4, 3 + 4 = 7, 2 + 1 = 3, 2 + 4 = 6, Top 2 sums are 7 and 6.

Input: a[] = [1, 4, 2, 3], b[] = [2, 5, 1, 6], k = 3
Output: [10, 9, 9]
Explanation: The top 3 maximum possible sums are : 4 + 6 = 10, 3 + 6 = 9, and 4 + 5 = 9

Constraints:
1 ≤ a.size() = b.size() ≤ 10^5
1 ≤ k ≤ a.size()
1 ≤ a[i], b[i] ≤ 10^4
*/

class Solution {
public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        int n = a.size();
        vector<int> ans;

        // Sort both arrays in descending order for maximum sum pairing
        sort(a.rbegin(), a.rend());
        sort(b.rbegin(), b.rend());

        // Max heap: stores {sum, {index in a, index in b}}
        priority_queue<pair<int, pair<int, int>>> pq;       //max heap : as we need the max element out of all elements

        // Set to track visited index pairs and avoid duplicates
        set<pair<int, int>> st;

        // Start with the largest possible sum: a[0] + b[0]
        pq.push({a[0] + b[0], {0, 0}});
        st.insert({0, 0});

        int i = 0;

        while (i < k && !pq.empty()) {
            auto tp = pq.top(); pq.pop();
            int sum = tp.first;
            int l = tp.second.first;
            int r = tp.second.second;

            ans.push_back(sum);

            // to get the max ele from {i,j} we have two options , {i+1,j} and {i,j+1} where i is from 'a' array and  j is from 'b' array
            // Push next pair from a: (l+1, r)
            if (l + 1 < n && st.find({l + 1, r}) == st.end()) {
                pq.push({a[l + 1] + b[r], {l + 1, r}});
                st.insert({l + 1, r});
            }

            // Push next pair from b: (l, r+1)
            if (r + 1 < n && st.find({l, r + 1}) == st.end()) {
                pq.push({a[l] + b[r + 1], {l, r + 1}});
                st.insert({l, r + 1});
            }

            i++;
        }

        return ans;
    }
};
