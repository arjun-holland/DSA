/*
Given a number represented as a string s (which may be very large), check whether it is divisible by 13 or not.

Examples:
Input : s = "2911285"
Output : true
Explanation: 2911285 / 13 = 223945, which is a whole number with no remainder.

Constraints:
1 â‰¤  s.size()  â‰¤ 10^5
*/

class Solution {
  public:
    bool divby13(string &s) {
        int remainder = 0;
        for (char c : s) {
            remainder = (remainder * 10 + (c - '0')) % 13;
        }
        return remainder == 0;
    }
};

/*
ðŸ§  How It Works:
Processes the number one digit at a time.
Maintains only the remainder mod 13, never storing the full number.
Uses this math property:
(a * 10 + b) % m == ((a % m) * 10 + b) % m
*/


#include <iostream>
using namespace std;

// Function to check if the given number (as a string) is divisible by 13
bool divBy13(string &s){
    int len = s.size();

    // Special case: if the number is "0", it's divisible by 13
    if (len == 1 && s[0] == '0') {
        return true;
    }

    // To apply the 3-digit group rule, we need the number's length to be a multiple of 3.
    // We pad zeros to the end (least significant digits) to make length divisible by 3.
    if (len % 3 == 1) {
        s += "00";  // Add 2 zeros
        len += 2;
    } else if (len % 3 == 2) {
        s += "0";   // Add 1 zero
        len += 1;
    }

    int sum = 0;   // Will store the final alternating sum
    int p = 1;     // Multiplier: +1, -1, +1, -1, ...

    // Process the number from right to left, 3 digits at a time
    for (int i = len - 1; i >= 0; i--) 
    {
        // Extract a 3-digit group
        int group = 0;
        group += s[i--] - '0';         // units
        group += (s[i--] - '0') * 10;  // tens
        group += (s[i] - '0') * 100;   // hundreds

        // Add to sum with alternating sign
        sum = sum + group * p;

        // Flip the sign for the next group
        p *= -1;
    }

    // Optional: abs() since we're only checking divisibility
    sum = abs(sum);

    // Check if the alternating sum is divisible by 13
    return (sum % 13 == 0);
}

