/*
You are given three integers n, m, k. A good array arr of size n is defined as follows:
Each element in arr is in the inclusive range [1, m].
Exactly k indices i (where 1 <= i < n) satisfy the condition arr[i - 1] == arr[i].
Return the number of good arrays that can be formed.

Since the answer may be very large, return it modulo 109 + 7.

Example:

Input: n = 3, m = 2, k = 1
Output: 4
Explanation:
There are 4 good arrays. They are [1, 1, 2], [1, 2, 2], [2, 1, 1] and [2, 2, 1].
Hence, the answer is 4.
*/

int MOD = 1e9+7;
class Solution {
public:
    //Binary exponentiation T.C : O(log(b))
    int findPower(long long a, long long b) {  //pow(a,b)
        if(b == 0)
            return 1;

        long long half = findPower(a, b/2);
        long long result = (half * half) % MOD;

        if(b%2 == 1) {
            result = (result * a) % MOD;
        }

        return result;
    }

    //nCr ka formula apply karne k lie
    long long nCr(int n, int r, vector<long long>& factorial, vector<long long>& fermatFact) {
        //n!/((n-r)! * r!)) % MOD
        //n! * ((n-r)!^-1 * r!^-1)%mod
        return factorial[n] * fermatFact[n-r] % MOD * fermatFact[r] % MOD; //O(1)
    }

    int countGoodArrays(int n, int m, int k) {

        vector<long long> factorial(n+1, 1);  //factorial precalculate or precompute : O(n)
        factorial[0] = 1;
        factorial[1] = 1;
        for(int i = 2; i <= n; i++) {
            factorial[i] = (factorial[i-1] * i) % MOD;
        }

        //Inverse factorial precalculate - Fermat's little theorem
        vector<long long> fermatFact(n+1, 1);
        for(int i = 0; i <= n; i++) {
            fermatFact[i] = findPower(factorial[i], MOD - 2); //fermats lettle theorm used for finding inverses: (a mod m is a^(m-2) mod m)
        }

        long long result = nCr(n-1, k, factorial, fermatFact); //(n-1)Ck because n-1  pairs are made from the n.  nCr

        result = result * m % MOD;

        result = result * findPower(m-1, n-k-1) % MOD;   //T.C : log(n-k-1)

        return result;
    }
};
//T.C : O(log(n-k-1))   for nCr * m * (m-1)^(n-k-1)
//S.C : O(n)
