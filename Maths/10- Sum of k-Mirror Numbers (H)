/*
A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.
For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.
Given the base k and the number n, return the sum of the n smallest k-mirror numbers.

Example :
Input: k = 2, n = 5
Output: 25
Explanation:
The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:
  base-10    base-2
    1          1
    3          11
    5          101
    7          111
    9          1001
Their sum = 1 + 3 + 5 + 7 + 9 = 25. 

Example 2:
Input: k = 3, n = 7
Output: 499
Explanation:
The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:
  base-10    base-3
    1          1
    2          2
    4          11
    8          22
    121        11111
    151        12121
    212        21212
Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.

Constraints:
2 <= k <= 9
1 <= n <= 30

*/

//OPTIMAL CODE
class Solution {
public:
    bool isPalindrome(string s){                // Checks if a string is a palindrome
        int i = 0, j = s.length() - 1;          // Time: O(L), where L is length of string
        while(i <= j){
            if(s[i] != s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    // Converts a number to base-k as a string
    string convertToBaseK(long long n, int k){       // Time: O(log_k(n)), since we divide by k each iteration
        if(n == 0) return "0";
        
        string s = "";
        while(n != 0){
            int r = n % k;
            s += to_string(r); // Append least significant digit
            n = n / k;
        }
        reverse(s.begin(), s.end()); // Reverse to get most significant digit first
        return s;
    }


    // Main function to find the sum of first n k-mirror numbers
    long long kMirror(int k, int n) {
        long long ans = 0;
        int L = 1;          // Start with palindrome length L = 1

        // Keep searching until we find n such numbers
        while(n > 0){
            int half_len = (L + 1) / 2;   //10^0 = 1 // Half length of the full palindrome for both,even(2):(2+1)/2 = 1, odd(1):1+1/2=1 
            
            // Generate palindromes using their half-parts
            long long min_num = pow(10, half_len - 1);  // Smallest number with half_len digits //if half_len=3 then 10^2 == 100 (Min 3 length nmumber)
            long long max_num = pow(10, half_len) - 1;  // Largest number with half_len digits   //10^3-1 = 1000-1 => 999 (Max 3 length number)

            // Time for this loop: O(9 * 10^(half_len - 1)) = exponential in L
            for(long long num = min_num ; num <= max_num; num++){
                // Generate palindrome by mirroring
                
                string first_half = to_string(num);
                string sec_half = first_half;
                reverse(begin(sec_half), end(sec_half));

                string pal = "";
                if(L % 2 == 0){
                    pal = first_half + sec_half;  // Even-length palindrome
                } else {
                    pal = first_half + sec_half.substr(1);   // Odd-length palindrome: skip middle digit when mirroring
                }

                long long pal_num = stoll(pal); // Convert to long long integer from string

                // Convert pal_num to base-k
                string numToKbase = convertToBaseK(pal_num, k);   // O(log_k(n))

                // Check if base-k representation is also a palindrome
                if(isPalindrome(numToKbase)){         // O(log_k(n))
                    ans += pal_num;         // Accumulate answer
                    n--;    // One less to find
                    if(n == 0) break; // Found all n numbers
                }
            }
            L++; // Increase length of palindromes to consider next
        }
        return ans;
    }
};




//BRUTE FORCE
class Solution {
public:
    bool solve(long long n,int k){
        string ns = to_string(n); //10
        int si = 0,sj = ns.length()-1;  
        while(si <= sj){  //0 1
            if(ns[si] != ns[sj]){
                return false;
            }
            si++;
            sj--;
        }

        string s = "";
        while(n != 0){
            int r = n % k;
            s = to_string(r) + s;
            n = n / k;
        }
        
        int i= 0,j= s.length()-1;
        while(i <= j){
            if(s[i] != s[j]){
                return false;
            }
            i++;
            j--;
        }
        
        return true;
    }
    long long kMirror(int k, int n) {
        long long tn = 0;
        long long ans = 0;
        long long cn = 1;
        while(tn < n){
            if(solve(cn,k)){
                ans += cn;
                tn++;
            }
            cn++;
        }
        return ans;
    }
};
