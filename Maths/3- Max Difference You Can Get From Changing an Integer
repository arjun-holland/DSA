/*
You are given an integer num. You will apply the following steps to num two separate times:
Pick a digit x (0 <= x <= 9).
Pick another digit y (0 <= y <= 9). Note y can be equal to x.
Replace all the occurrences of x in the decimal representation of num by y.
Let a and b be the two results from applying the operation to num independently.
Return the max difference between a and b.
Note that neither a nor b may have any leading zeros, and must not be 0.

Example:
Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888

Input: num = 123456
Output: 820000
*/

class Solution {
public:
    int maxDiff(int num) {
        string s = to_string(num);
        string a = s, b = s;

        // Build maxNum (replace first non-9 digit with 9)
        char toReplace = ' ';
        for (char c : s) {
            if (c != '9') {
                toReplace = c;
                break;
            }
        }
        if (toReplace != ' ') {
            for (char &c : a) {
                if (c == toReplace) c = '9';
            }
        }

        // Build minNum
        if (s[0] != '1') {
            char target = s[0];
            for (char &c : b) {
                if (c == target) c = '1';
            }
        } else {
            for (int i = 1; i < s.size(); ++i) {
                if (s[i] != '0' && s[i] != '1') {
                    char target = s[i];
                    for (int j = 0; j < b.size(); ++j) {
                        if (b[j] == target) b[j] = '0';
                    }
                    break;
                }
            }
        }
        return stoi(a) - stoi(b);
    }
};
