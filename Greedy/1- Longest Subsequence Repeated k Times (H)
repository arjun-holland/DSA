/*
You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.

 
Example 1:
Input: s = "letsleetcode", k = 2
Output: "let"
Explanation: There are two longest subsequences repeated 2 times: "let" and "ete".
"let" is the lexicographically largest one.

Example 2:
Input: s = "bb", k = 2
Output: "b"
Explanation: The longest subsequence repeated 2 times is "b".

Example 3:
Input: s = "ab", k = 2
Output: ""
Explanation: There is no subsequence repeated 2 times. Empty string is returned.
 

Constraints:
n == s.length
2 <= n, k <= 2000
2 <= n < k * 8
s consists of lowercase English letters.
*/


class Solution {
public:
    string longestSubsequenceRepeatedK(string s, int k) {
        string result = "";
        queue<string> q;
        q.push("");
        while (!q.empty()) {
            string curr = q.front();
            q.pop();
            for (char ch = 'a'; ch <= 'z'; ++ch) {
                string next = curr + ch;
                if (isK(next, s, k)) {
                    result = next;
                    q.push(next);
                }
            }
        }
        return result;
    }

    bool isK(string sub, string t, int k) {
        int count = 0; // How many times we found sub as a subsequence
        int i = 0;     // Pointer for current position in sub

        // Go through each character in t
        for (char ch : t) {
            // If it matches the current character in sub
            if (ch == sub[i]) {
                i++; // Move to the next character in sub

                // If we matched the whole sub string
                if (i == sub.size()) {
                    count++; // One full match found
                    i = 0;   // Restart to look for next match
                    // If we matched it k times, return true
                    if (count == k)
                        return true;
                }
            }
        }

        // After going through t, if count < k, return false
        return false;
    }
};
