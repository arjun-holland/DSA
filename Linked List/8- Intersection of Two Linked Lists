/*
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
If the two linked lists have no intersection at all, return null.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL)return NULL;

        ListNode* endA = headA;        //connect the listA end to the listB head
        while(endA -> next != NULL){
            endA = endA -> next;
        }
        endA -> next = headB;

        ListNode* s = headA;   
        ListNode* f = headA;
        while(f->next != NULL && f->next->next != NULL){
            s = s->next;
            f = f->next->next;
            if(s == f){
                ListNode* st = headA;
                while(st != s){
                    s = s->next;
                    st = st->next;
                }
                endA->next = NULL;
                return st;
            }
        }
        endA->next = NULL;
        return NULL;
    }
};



class Solution {
public:
    ListNode *getIntersectionNode(ListNode *head1, ListNode *head2) {
        ListNode* t1=head1; 
        ListNode* t2=head2;
        while(true){
            if(t1 == t2)return t1;//when both t1 and t2 address are same then that is the interset point
            t1 = t1->next;
            t2 = t2->next;
            if(t1 == nullptr && t2 == nullptr)return nullptr;
            if(t1 == nullptr)t1 = head1;
            if(t2 == nullptr)t2 = head2;
        }
        return nullptr;

    }
};
