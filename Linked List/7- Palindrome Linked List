/*
Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) return true;

        ListNode* slow = head;   // Step 1: Find the middle using slow and fast pointers
        ListNode* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Step 2: If odd number of elements, skip the middle node
        if (fast) slow = slow->next;  // 1 ->2 ->3 -> 2 ->1

        ListNode* prev = NULL;   // Step 3: Reverse second half
        while (slow) {
            ListNode* temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }  // 1 ->2 ->3 -> X<- 2<- 1

        ListNode* left = head;   // Step 4: Compare both halves
        ListNode* right = prev;
        while (right) {
            if (left->val != right->val) return false;
            left = left->next;
            right = right->next;
        }
        return true;
    }
};


//reverse first half
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)return true;
        ListNode* p1 = head;
        ListNode* p2 = head;
        while(p2 != NULL && p2->next != NULL){ //middle
            p1 = p1 -> next;
            p2 = p2 -> next -> next;
        }
        ListNode* prev = NULL;  //revrse fisrt half
        ListNode* next = NULL;
        ListNode* cur = head;
        while(cur != p1){
            next = cur -> next;
            cur -> next = prev;
            prev = cur;
            cur = next;
        }
        head->next = p1;
        if(p2 != NULL && p2 -> next == NULL){  //check odd condition
            p1 = p1 -> next;
        }
        while(p1 != NULL){   
            if(p1 -> val != prev -> val){
                return false;
            }
            p1 = p1 -> next;
            prev = prev -> next;
        }
        return true;
    }
};





